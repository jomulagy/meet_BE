name: CD for Dev

# 언제 이 파일의 내용이 실행될 것인지 정의합니다.
# 여기서는 main 브랜치에 코드가 push 되거나 pull_request되었을 때 실행할 것을 말하고 있습니다.
on:
  push:
    branches: [ "develope" ]

# 코드의 내용을 이 파일을 실행하여 action을 수행하는 주체(Github Actions에서 사용하는 VM)가 읽을 수 있도록 허용합니다.
permissions:
  contents: read

# 실제 실행될 내용들을 정의합니다.
jobs:
  build:
    runs-on: ubuntu-latest # ubuntu 최신 버전에서 script를 실행

    steps:
    # 지정한 저장소(현재 REPO)에서 코드를 워크플로우 환경으로 가져오도록 하는 github action
    - uses: actions/checkout@v3

    # open jdk 17 버전 환경을 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: "adopt"

    # Github secrets로부터 데이터를 받아서, 워크 플로우에 파일을 생성
    - name: Make application.properties
      run: |
        cd ./src/main/resources
        touch ./application-dev.yml
        echo "${{ secrets.PROPERTIES_DEV }}" > ./application-dev.yml
      shell: bash

    # gradle을 통해 소스를 빌드.
    - name: Build with Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew clean build -x test

    # 빌드 결과물을 artifact로 업로드
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: build/libs/

  docker:
    runs-on: ubuntu-latest # ubuntu 최신 버전에서 script를 실행
    needs: build  # build 작업이 완료된 후 실행됨

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # 빌드한 아티팩트 다운로드
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: build/libs  # 다운받을 위치 (Dockerfile에서 참조할 경로)

      # docker hub login
      - name: Login to Docker hub
        run: |
          echo "your_access_token" |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}      

        # dockerfile을 통해 이미지를 빌드하고, 이를 docker repo로 push 합니다.
      # 이 때 사용되는 ${{ secrets.DOCKER_REPO }}/directors-dev 가 위에서 만든 도커 repository 입니다.
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:dev

  deploy:
    runs-on: ubuntu-latest # ubuntu 최신 버전에서 script를 실행
    needs: docker  # build 작업이 완료된 후 실행됨

    steps:
      # appleboy/ssh-action@master 액션을 사용하여 지정한 서버에 ssh로 접속하고, script를 실행합니다.
      # script의 내용은 도커의 기존 프로세스들을 제거하고, docker repo로부터 방금 위에서 push한 내용을 pull 받아 실행하는 것입니다.
      # 실행 시, docker-compose를 사용합니다.
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        id: deploy
        with:
          host: ${{ secrets.HOST_DEV }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          envs: GITHUB_SHA
          script: |
            sudo timedatectl set-timezone Asia/Seoul
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker stop meetDev || true
            docker rm meetDev || true
            docker rmi $(docker images -q --filter "reference=*:*dev") || true
            docker rm $(docker ps -a -q -f status=exited) || true
            docker rm $(docker ps -a -q -f status=created) || true
            
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:dev
            docker run -d --restart on-failure:5 -p 8001:8001 -v /home/ubuntu/data:/data -v /etc/localtime:/etc/localtime:ro -v /etc/timezone:/etc/timezone:ro --name meetDev ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:dev